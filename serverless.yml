service: e-commerce-api
frameworkVersion: "4"

package:
  individually: true

stages:
  prod:
    params:
      replicas_enabled: ENABLED
  default:
    params:
      replicas_enabled: DISABLED

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  environment:
    USER_POOL_CLIENT_ID:
      Fn::GetAtt:
        - userPoolClient
        - ClientId
    USER_POOL_ID:
      Ref: userPool
    E_COMMERCE_TABLE:
      Ref: eCommerceTable
    PRODUCTS_DOMAIN_ENDPOINT:
      Fn::GetAtt:
        - productsSearchDomain
        - DomainEndpoint
    STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET}
    STRIPE_SK: ${env:STRIPE_SK}
    DOMAIN: ${env:DOMAIN}
  logRetentionInDays: 30
  httpApi:
    metrics: true
    cors: true
    authorizers:
      jwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::GetAtt:
            - userPool
            - ProviderURL
        audience:
          - Ref: userPoolClient

  iam: ${file(iam.yml)}

plugins:
  - serverless-esbuild

build:
  esbuild: false

functions:
  #users
  signUp:
    handler: src/routes/user/signup.handler
    events:
      - httpApi:
          method: POST
          path: /auth/register

  confirmSignUp:
    handler: src/routes/user/confirm.handler
    events:
      - httpApi:
          method: POST
          path: /auth/confirm

  login:
    handler: src/routes/user/login.handler
    events:
      - httpApi:
          method: POST
          path: /auth/login

  refresh:
    handler: src/routes/user/refresh.handler
    events:
      - httpApi:
          method: POST
          path: /auth/refresh

  #products
  createProduct:
    handler: src/routes/product/create_product.handler
    events:
      - httpApi:
          method: POST
          path: /product
          authorizer:
            name: jwtAuthorizer

  getProduct:
    handler: src/routes/product/get_product.handler
    events:
      - httpApi:
          method: GET
          path: /product/{id}

  updateProduct:
    handler: src/routes/product/update_product.handler
    events:
      - httpApi:
          method: PATCH
          path: /product/{id}
          authorizer:
            name: jwtAuthorizer

  searchProducts:
    handler: src/routes/product/search_products.handler
    events:
      - httpApi:
          method: POST
          path: /search/product

  filterProductByCategories:
    handler: src/routes/product/get_products_by_categories.handler
    events:
      - httpApi:
          method: POST
          path: /categories/product

  indexProductToSearch:
    handler: src/functions/streams/index_product_to_search.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [eCommerceTable, StreamArn]

  #cart
  getCart:
    handler: src/routes/cart/get_cart.handler
    events:
      - httpApi:
          method: GET
          path: /cart
          authorizer:
            name: jwtAuthorizer

  addItemToCart:
    handler: src/routes/cart/add.handler
    events:
      - httpApi:
          method: POST
          path: /cart/{id}
          authorizer:
            name: jwtAuthorizer

  removeItemFromCart:
    handler: src/routes/cart/remove.handler
    events:
      - httpApi:
          method: DELETE
          path: /cart/{id}
          authorizer:
            name: jwtAuthorizer

  #checkout
  startCheckoutSession:
    handler: src/routes/checkout/start_checkout_session.handler
    events:
      - httpApi:
          path: /checkout
          method: POST
          authorizer:
            name: jwtAuthorizer

  # #orders
  getOrder:
    handler: src/routes/order/get_order.handler
    events:
      - httpApi:
          path: /order/{cartUUID}
          method: GET
          authorizer:
            name: jwtAuthorizer

  getOrders:
    handler: src/routes/order/get_orders.handler
    events:
      - httpApi:
          path: /orders
          method: GET
          authorizer:
            name: jwtAuthorizer

  paymentCompletedWebhook:
    handler: src/functions/webhooks/payment_intent_completed.handler
    events:
      - httpApi:
          path: /webhooks
          method: POST

  #Internal functions
  createIndex:
    handler: src/functions/opensearch/create_index.handler

  updateMappings:
    handler: src/functions/opensearch/update_mappings.handler

resources: ${file(resources.yml)}
