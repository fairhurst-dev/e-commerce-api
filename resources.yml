Resources:
  userPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:service}-${sls:stage}-user-pool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          Required: true
          Mutable: true
      MfaConfiguration: OFF
      EmailVerificationMessage: "Your verification code is {####}"
      EmailVerificationSubject: "Verify your email"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameConfiguration:
        CaseSensitive: false
  userPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:service}-${sls:stage}-user-pool-client
      UserPoolId:
        Ref: userPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId:
        Ref: userPool
  eCommerceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:service}-${sls:stage}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: "GSI1"
          KeySchema:
            - AttributeName: "SK"
              KeyType: "HASH"
            - AttributeName: "PK"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "GSI2"
          KeySchema:
            - AttributeName: "GSI2PK"
              KeyType: "HASH"
            - AttributeName: "SK"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  productsSearchCollection:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: ${self:service}-${sls:stage}
      StandbyReplicas: DISABLED
      Type: SEARCH
    DependsOn: productsSearchSecurityPolicy
  productsSearchSecurityPolicy:
    Type: "AWS::OpenSearchServerless::SecurityPolicy"
    Properties:
      Name: ${self:service}-${sls:stage}-sec
      Type: encryption
      Policy: !Sub >-
        {"Rules":[{"ResourceType":"collection","Resource":["collection/${self:service}-${sls:stage}"]}],"AWSOwnedKey":true}
  productsSearchNetworkPolicy:
    Type: "AWS::OpenSearchServerless::SecurityPolicy"
    Properties:
      Name: ${self:service}-${sls:stage}-net
      Type: network
      Policy: !Sub >-
        [{"Rules":[{"ResourceType":"collection","Resource":["collection/${self:service}-${sls:stage}"]}, {"ResourceType":"dashboard","Resource":["collection/${self:service}-${sls:stage}*"]}],"AllowFromPublic":true}]
  productsSearchAccessPolicy:
    Type: "AWS::OpenSearchServerless::AccessPolicy"
    Properties:
      Name: ${self:service}-${sls:stage}-acc
      Type: data
      Policy: !Sub >-
        [{"Rules":[{"ResourceType":"index","Resource":["index/${self:service}-${sls:stage}/*"],"Permission":["aoss:*"]},{"ResourceType":"collection","Resource":["collection/${self:service}-${sls:stage}"],"Permission":["aoss:*"]}],"Principal":["arn:aws:iam::${aws:accountId}:role/${self:service}-${sls:stage}-${aws:region}-lambdaRole", "arn:aws:iam::${aws:accountId}:user/cfairhurst99"]}]
